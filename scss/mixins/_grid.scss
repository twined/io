@mixin container() {
  width: 100%;
  margin-right: auto;
  margin-left: auto;

  @each $bp-name, $bp-size in $grid-breakpoints {
    @include media($bp-name) {
      padding-right: map-get($container-padding, $bp-name);
      padding-left: map-get($container-padding, $bp-name);
    }
  }
}

@mixin col($size, $right-pad: 0) {
  position: relative;
  $percentage: percentage($size / 12);
  @if $right-pad > 0 {
    @each $bp-name, $bp-size in $grid-breakpoints {
      @include media('>=#{$bp-name}') {
        flex: 0 0 calc(#{$percentage} + (#{map-get($gutters, $bp-name) * $right-pad / 2}));
      }
    }
  } @else {
    flex: 0 0 $percentage;
    max-width: $percentage;
  }
}

@mixin col-typo($cols, $size: 0) {
  $percentage: percentage($cols / 12);
  @if $size > 1 {
    $size: $size / 10
  } @else {
    $size: 0
  }

  position: relative;
  flex: 0 0 $percentage;
  max-width: $percentage;
  padding-right: $percentage / 10 * (1 + $size);
}

@mixin pad($dir, $times: 1) {
  @each $bp-name, $bp-size in $grid-breakpoints {
    @include media('>=#{$bp-name}') {
      padding-#{$dir}: map-get($gutters, $bp-name) * $times / 2;
    }
  }
}

@mixin margin($dir, $times: 1) {
  @each $bp-name, $bp-size in $grid-breakpoints {
    @include media('>=#{$bp-name}') {
      margin-#{$dir}: map-get($gutters, $bp-name) * $times / 2;
    }
  }
}

@mixin pull($dir, $times: 1) {
  @each $bp-name, $bp-size in $grid-breakpoints {
    @include media('>=#{$bp-name}') {
      margin-#{$dir}: map-get($gutters, $bp-name) * $times / 2 * -1;
    }
  }
}

@mixin push($dir, $times: 1) {
  @each $bp-name, $bp-size in $grid-breakpoints {
    @include media('>=#{$bp-name}') {
      margin-#{$dir}: map-get($gutters, $bp-name) * $times / 2;
    }
  }
}

@mixin offset($size: 1) {
  margin-left: percentage($size / 12);
}

@mixin space($selector, $size, $mq: 'all') {
  $size-map: map-get($io-padding-map, $size);

  @if $mq == 'all' {
    @each $bp-name, $data in $size-map {
      @include media('>=#{$bp-name}') {
        #{$selector}: #{$data};
      }
    }
  }
  @else {
    $data: map-get($size-map, $mq);
    @include media($mq) {
      #{$selector}: #{$data};
    }
  }
}

@mixin spacer($selector, $size, $mq: 'all') {
  $size-map: map-get($io-padding-map, $size);

  @if $mq == 'all' {
    @each $bp-name, $data in $size-map {
      @include media('>=#{$bp-name}') {
        #{$selector}: #{$data / 2};
      }
    }
  }
  @else {
    $data: map-get($size-map, $mq);
    @include media($mq) {
      #{$selector}: #{$data / 2};
    }
  }
}
