// stylelint-disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
//
// Automated responsive font sizes
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Configuration

// Cache $rfs-base-font-size unit
$rfs-base-font-size-unit: unit($rfs-base-font-size);

// Remove px-unit from $rfs-base-font-size for calculations
@if $rfs-base-font-size-unit == "px" {
  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1);
}
@else if $rfs-base-font-size-unit == "rem" {
  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1 / $rfs-rem-value);
}

$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);

// Remove unit from $rfs-breakpoint for calculations
@if $rfs-breakpoint-unit-cache == "px" {
  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);
}
@else if $rfs-breakpoint-unit-cache == "rem" or $rfs-breakpoint-unit-cache == "em" {
  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);
}

// Responsive font size mixin
@mixin rfs($fs, $bp: "md", $min-size: $rfs-base-font-size) {
  // Cache $fs unit
  $fs-unit: if(type-of($fs) == "number", unit($fs), false);

  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
  @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem" or $fs == 0 {
    font-size: #{$fs};
  }
  @else {
    // Remove unit from $fs for calculations
    @if $fs-unit == "px" {
      $fs: $fs / ($fs * 0 + 1);
    }
    @else if $fs-unit == "rem" {
      $fs: $fs / ($fs * 0 + 1 / $rfs-rem-value);
    }

    // Set default font size
    $rfs-static: if($rfs-font-size-unit == rem, #{$fs / $rfs-rem-value}rem, #{$fs}px);

    // Only add the media query if the font size is bigger than the minimum font size
    @if $fs <= $min-size {
      font-size: #{$rfs-static};
    }

    @else {
      // get min-width for breakpoint
      $rfs-breakpoint: bpmax($bp) / 1px;

      // Calculate the minimum font size for $fs
      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;
      $fs-min: $min-size / ($min-size * 0 + 1);

      // Calculate difference between $fs and the minimum font size
      $fs-diff: $fs - $fs-min;

      // Base font-size formatting
      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min}px);

      // Calculate the variable width between 0 and $rfs-breakpoint
      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}vw;

      // Set the calculated font-size
      $rfs-fluid: calc(#{$min-width} + #{$variable-width});

      // Breakpoint formatting
      $mq-value: #{$rfs-breakpoint}px;

      @include media(#{$bp}) {
        font-size: $rfs-fluid;
        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
      }
    }
  }
}

@mixin responsive-font-size($fs, $important: false) {
  @include rfs($fs, $important);
}